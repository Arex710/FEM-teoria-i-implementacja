import numpy as npimport matplotlib.pyplot as pltdef AutomatycznyGeneratorGeometrii(a, b, n):    ''''    Parametry:    a,b - krance przedzialu    n - liczba rownomiernie rozmieszczonych wezlow    Zwraca:    WEZLY - macierz([indeks, wartosc])    ELEMENTY - macierz     '''    lp = np.arange(1,n+1) #Numer globalny wezla    x = np.linspace(a,b,n) #Wartosci wezlow    WEZLY = (np.vstack((lp.T, x.T))).T # [lp.T, x.T] #Zlozenie i transpozycja macierzy        lp = np.arange(1,n)    C1 = np.arange(1,n)    C2 = np.arange(2, n+1)    ELEMENTY = (np.block([[lp],[C1], [C2]])).T        return WEZLY, ELEMENTYdef RysujGeometrie(WEZLY, ELEMENTY):    '''    Parametry:    WEZLY - krance przedzialu    ELEMENTY - liczba rownomiernie rozmieszczonych wezlow    Zwraca:    okno plot prezentujace geometrie zagadnienia z wykresami    '''        fh = plt.figure()        plt.plot(WEZLY[:,1], np.zeros( (np.shape(WEZLY)[0], 1) ), '-b|' )            nodeNo = np.shape(WEZLY)[0]            for ii in np.arange(0,nodeNo):                ind = WEZLY[ii,0]        x = WEZLY[ii,1]        plt.text(x, 0.01, str( int(ind) ), c="b")        plt.text(x, -0.01, str(x))         elemNo = np.shape(ELEMENTY)[0]    for ii in np.arange(0,elemNo):        wp = ELEMENTY[ii,1]        wk = ELEMENTY[ii,2]        x = (WEZLY[wp-1,1] + WEZLY[wk-1,1] ) / 2          plt.text(x, 0.01, str(ii+1), c="r")    return fhdef Alokacja(n):    ''''    Parametry:    n - zmienna okreslajaca rozmiar macierzy A(nxn) i wektora b (nx1)    Zwraca:    A, b - tablice zer o rozmiarach nxn oraz nx1    '''    A = np.zeros([n,n])    b = np.zeros([n,1])    return A,bdef FunkcjeBazowe(n):    if n == 0:        f = lambda x: 0*x +1        df = lambda x: 0*x    elif n == 1:        f = (lambda x: -0.5 * x + 0.5, lambda x: 0.5*x + 0.5)        df = (lambda x: -0.5 + 0 * x, lambda x: 0.5 + 0*x)    else:        raise Exception('Blad w FunkcjeBazowe()')    return f, dfdef Aij(dphi1, dphi2, c, phi1, phi2):    ''''    Parametry:    dphi_i, phi_i - pochodne funkcji ksztaltu    c - wspolczynnik drgan wlasnych    Zwraca:    wyrazenie lambda bedace funkcja podcalkowa A_ij    '''    return lambda x: -dphi1(x) * dphi2(x) + c * phi1(x) * phi2(x)def GenerujTabliceGeometrii(x_p,x_k,n):        val = (x_k-x_p)/(n-1)    wezly = np.array([x_p])        for i in range(1,n,1):        wezly = np.block([wezly, i * val + x_p])        elementy = np.zeros((n-1,2))       for i in range(0, n-1, 1):        elementy[i][0] = i+1        elementy[i][1] = i+2        return wezly,elementydef RysujRozwiazanie(WEZLY, ELEMENTY, WB, u):    '''    Parametry:    WEZLY - krance przedzialu    ELEMENTY - liczba rownomiernie rozmieszczonych wezlow    WB - warunki brzegowe    u - rozwiazanie    Rezultat:    okno prezentujace geometrie zagadnienia z wykresami wykonanymi    przy wykorzystaniu pakietu matplotlib    '''        RysujGeometrie(WEZLY,ELEMENTY)    print(WEZLY)    print(ELEMENTY)    print(WB)    x = WEZLY[:,1]    plt.figure()    plt.plot(x, u, 'm*') 