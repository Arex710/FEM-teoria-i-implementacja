import numpy as npimport matplotlib.pyplot as pltdef GeometriaDefinicja():    NODES = np.array([[1, 0],                      [2, 1],                      [3, 0.5],                      [4, 0.75]])    ELEMS = np.array([[1, 1, 3],                      [2, 4, 2],                      [3, 3, 4]])    # w postaci krotek: nr_wezla, typ warunku, wartosc    # przy pomocy slownika    WB = [{"ind": 1, "typ": '0', "wartosc":1},          {"ind":2, "typ": '0', "wartosc": 2}]    return NODES, ELEMS, WBdef AutomatycznyGeneratorGeometrii(a, b, n):    ''''    Parametry:    a,b - krance przedzialu    n - liczba rownomiernie rozmieszczonych wezlow    Zwraca:    WEZLY    ELEMENTY    '''    lp = np.arange(1,n+1)    x = np.linspace(a,b,n)    WEZLY = (np.vstack((lp.T, x.T))).T # [lp.T, x.T]        lp = np.arange(1,n)    C1 = np.arange(1,n)    C2 = np.arange(2, n+1)    ELEMENTY = (np.block([[lp],[C1], [C2]])).T        return WEZLY, ELEMENTYdef RysujGeometrie(NODES, ELEMS, WB):    fh = plt.figure()    plt.plot(NODES[:,1], np.zeros((np.shape(NODES)[0], 1)), '-b/')    nodeNo = np.shape(NODES)[0]    for li in np.arange(0, nodeNo):        ind = NODES[li,0]        x = NODES[li, 1]        plt.text(x, 0.01, str(int(ind)), c = "b")        plt.text(x, -0.01, str(x))    elemNo = np.shape(ELEMS)[0]    for li in np.arange(0, elemNo):        wp = ELEMS[li,1]        wk = NODES[li,2]        x = (NODES[wp-1, 1] + NODES[wk-1,1])/2        plt.text(x, 0.01, str(li+1), c ="r")    plt.show()    return fhdef Alokacja(n):    ''''    Parametry:    n - rozmiar macierzy A(nxn) i wektora b (nx1)    Zwraca:    A, b - tablice zer o rozmiarach nxn oraz nx1    '''    A = np.zeros([n,n])    b = np.zeros([n,1])    return A,bdef FunkcjeBazowe(n):    if n == 0:        f = lambda x: 0*x +1        df = lambda x: 0*x    elif n == 1:        f = (lambda x: -1/2 * x+1/2, lambda x: 0.5*x + 0.5)        df =(lambda x: -1/2 + 0 * x, lambda x: 0.5 + 0*x)    else:        raise Exception('Blad w FunkcjeBazowe()')    return f, dfdef Aij(dphi1, dphi2, c, phi1, phi2):    ''''    Parametry:    dphi_i, phi_i - pochodne funkcji ksztaltu    c-    Zwraca:    wyrazenie lambda bedace funkcja podcalkowa A_ij    '''    return lambda x: -dphi1(x) * dphi2(x) + c * phi1(x) * phi2(x)elementy = np.array([[1, 3],                     [4, 2],                     [3, 4]])twb_L = 'D'twb_R = 'D'wwb_L = 0wwb_R = 1n = 100#def Inicjalizacja_paramatrow_sterujacych(przedzial,war_brzeg)def GenerujTabliceGeometrii(x_p,x_k,n):        val = (x_k-x_p)/(n-1)    wezly = np.array([x_p])        for i in range(1,n,1):        wezly = np.block([wezly, i * val + x_p])        elementy = np.zeros((n-1,2))       for i in range(0, n-1, 1):        elementy[i][0] = i+1        elementy[i][1] = i+2        return wezly,elementydef Rysuj_geometrie(wezly):    n = len(wezly)    tab=np.zeros((n))    l1 = plt.plot(wezly,tab)    for i in range(0,n,1):        plt.text(wezly[i], -0.01, str(i+1))        plt.text(wezly[i], 0, "|")        plt.text(wezly[i]/2+wezly[i]/2, 0.005 ,str(i+1))    plt.show()        Wezly, Elementy = GenerujTabliceGeometrii(0,1,4)Rysuj_geometrie(Wezly)print('Liczba wezlow: ', len(Wezly))print('Tablica wezlow: ', Wezly)print('Tablica elementow: ', Elementy)